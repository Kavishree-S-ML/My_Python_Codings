# syslog mapping
linux-syslog:
  source:
    '@type': tail
    path: '/var/log/syslog, /var/log/auth.log, /var/log/messages, /var/log/secure'
    pos_file: '/var/log/td-agent/syslog.pos'
  rewrite_tag_filter:
    tag: 'process'
    clear: (?<time>[^ ]*\s*[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>(python)|(collectd))
    extra_data: '(?<time>[^ ]*\s*[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>.*)'
  parse:
    extra_data: '(?<time>[^ ]*\s*[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[^ :\[]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? (?<message>.*)'
    #python: '(?<time>[^ ]*\s*[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[^ :\[]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? (?<remote_host>[^:]+)[:](?<remote_pid>[^ -]+) [\-](?<msg_id>[^-]+)[\-] (?<message>.+)$'
  transform:
    node: '#{Socket.gethostname}'
    _plugin: 'linux'
    _documentType: 'syslog'
    file: '${tag_suffix[1]}'
    host: ${record['host']}
    ident: ${record['ident']}
    level: ${n_level='info'; if record.key?('level') == nil or record['level'] == nil then n_level else record['level'] end}
    pid: ${record['pid']}
    time: ${require 'time'; time.to_time.to_i}
  match:
    flush_interval: 30s

# elasticsearch mapping
elasticsearch:
  source:
    '@type': tail
    path: '/var/log/elasticsearch/elasticsearch.log'
    pos_file: '/var/log/td-agent/elasticsearch.pos'
  parse:
    '@type': regexp
    time_format: '%Y-%M-%D"T"%hr:%mi:%s,%ms'
    expression: '^[\[](?<time>[^\]]*)[\]]\[(?<level>[^\]]*)\]\[(?<logging_class>[^\]]*)\] (?<message>.*)$'
  transform:
    node: '#{Socket.gethostname}'
    file: '${tag_suffix[1]}'
    _plugin: 'apache'
    _documentType: 'access'
    time: ${require 'time'; time.to_time.to_i}
    level: 'info'
    message: ''
  match:
    flush_interval: 30s